<?php

/**
 * @file
 * Billing and subscription management via Stripe for the Beacon platform.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Utility\Error;
use Drupal\Core\Entity\EntityTypeInterface;
use Stripe\Subscription as StripeSubscription;

/**
 * Implements hook_entity_inser().
 */
function beacon_billing_entity_insert(EntityInterface $entity) {
  // Check if this entity is a channel.
  if ($entity->getEntityTypeId() == 'channel') {
    // Update the subscription quantity for the current user.
    \Drupal::service('beacon_billing')->updateSubscriptionQuantity();
  }
}

/**
 * Implements hook_entity_delete().
 */
function beacon_billing_entity_delete(EntityInterface $entity) {
  // Check if this entity is a user.
  if ($entity->getEntityTypeId() == 'user') {
    // Extract the subscription.
    if ($subscription = \Drupal::service('beacon_billing')->getUserSubscription($entity)) {
      // Delete the subscription.
      $subscription->delete();
    }
  }

  // Check if this entity is a subscription.
  if ($entity->getEntityTypeId() == 'subscription') {
    // Cancel the subscription.
    \Drupal::service('beacon_billing')->cancelSubscription($entity, TRUE);
  }

  // Check if this entity is a channel.
  if ($entity->getEntityTypeId() == 'channel') {
    // Update the subscription quantity for the current user.
    \Drupal::service('beacon_billing')->updateSubscriptionQuantity();
  }
}

/**
 * Implements hook_entity_presave().
 */
function beacon_billing_entity_presave(EntityInterface $entity) {
  // Check if this entity is an event.
  if ($entity->getEntityTypeId() == 'event') {
    // Check if the entity is new.
    if ($entity->isNew()) {
      // Get the user's subscription plan.
      if ($plan = \Drupal::service('beacon_billing')->getUserSubscriptionPlanDefinition()) {
        // Check if there is an event history setting.
        if ($plan['eventHistory'] !== NULL) {
          // Set the expiration field.
          $entity->set('expire', strtotime('+' . $plan['eventHistory'] . ' days'));
        }
        else {
          // TODO: Remove the expiration?
        }
      }
    }
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function beacon_billing_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  // Check for the alert entity type.
  if ($entity_type->id() == 'alert') {
    $fields['type']->addConstraint('SubscriptionPlanAlertType');
  }
}

/**
 * Implements hook_entity_type_build().
 */
function beacon_billing_entity_type_build(array &$entity_types) {
  // Add quota constraints to alerts and events.
  $entity_types['event']->addConstraint('EventQuota');
  $entity_types['alert']->addConstraint('AlertQuota');

  // Add subscription status contraints to alerts, events, and channels.
  $entity_types['channel']->addConstraint('SubscriptionStatus');
  $entity_types['event']->addConstraint('SubscriptionStatus');
  $entity_types['alert']->addConstraint('SubscriptionStatus');
}

/**
 * Implements hook_theme().
 */
function beacon_billing_theme($existing, $type, $theme, $path) {
  $items = [];
  $items['invoice'] = [
    'template'  => 'invoice',
    'variables' => [
      'site_name' => NULL,
      'date' => NULL,
      'number' => NULL,
      'discounted' => NULL,
      'discount_percent' => NULL,
      'discount_amount_off' => NULL,
      'discount_total' => NULL,
      'tax' => NULL,
      'tax_percent' => NULL,
      'subtotal' => NULL,
      'total' => NULL,
      'paid' => NULL,
      'period_start' => NULL,
      'period_end' => NULL,
      'invoices_url' => NULL,
      'lines' => NULL,
    ],
    'path' => $path . '/templates',
  ];
  $items['beacon_billing_quotas'] = [
    'template'  => 'beacon-billing-quotas',
    'variables' => [
      'no_content' => NULL,
      'channel_event_quota_chart' => NULL,
      'channel_alert_quota_chart' => NULL,
    ],
    'path' => $path . '/templates',
  ];
  return $items;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function beacon_billing_preprocess_block(&$variables) {
  // Check for the main content block.
  if ($variables['plugin_id'] == 'system_main_block') {
    // Get the route name.
    $route_name = \Drupal::routeMatch()->getRouteName();

    // Check the route name.
    switch ($route_name) {
      case 'beacon_billing.quotas':
        // Do not render this block as a tile since our theme will
        // render everything as individual cards.
        $variables['no_tile'] = TRUE;
        break;
    }
  }
}

/**
 * Implements hook_mail().
 */
function beacon_billing_mail($key, &$message, $params) {
  switch ($key) {
    // Billing error.
    case 'billing_error':
      $message['subject'] = '[Billing error] ' . $params['message'];
      $message['body'][] = 'A error occurred during a billing/subscription operation:';
      $message['body'][] = '';
      $message['body'][] = 'Error: ' . $params['message'];

      // Check for an exception.
      if ($params['exception']) {
        $message['body'][] = 'Exception: ' . strtr('%type: @message in %function (line %line of %file).', Error::decodeException($params['exception']));
      }
      break;

    // Trial ending.
    case 'trial_ending':
      $site_name = \Drupal::config('system.site')->get('name');
      $message['subject'] = 'Your ' . $site_name . ' trial is about to end';
      $message['body'][] = 'Hi ' . $params['user']->getDisplayName() . ',';
      $message['body'][] = 'Your free trial with ' . $site_name . ' is going to end soon. Please navigate to the URL below to add a payment method to your account in order to prevent losing access to the service.';
      $message['body'][] = '';
      $message['body'][] = ' - ' . Url::fromRoute('beacon_billing.manage_subscription', [], ['absolute' => TRUE])->toString();
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_billing_form_channel_add_form_alter(&$form, FormStateInterface &$form_state) {
  // Add a consent checkbox.
  $form['consent'] = [
    '#type' => 'checkbox',
    '#title' => t('I understand and agree that adding a channel may increase my monthly costs'),
    '#required' => TRUE,
  ];
  $form['actions']['#weight'] = 100;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_billing_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Proceed if the user is actually registering, rather than an admin creating
  // a new user.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Add our submit handler.
    $form['actions']['submit']['#submit'][] = 'beacon_billing_form_user_register_form_submit';

    // Cache based on the URL so plans can be passed in.
    $form['#cache']['contexts'][] = 'url';

    // Check if a plan ID was passed in.
    if ($plan = \Drupal::requestStack()->getCurrentRequest()->query->get('plan')) {
      // Load the plan manager.
      $plan_manager = \Drupal::service('plugin.manager.subscription_plan');

      // Load the plan plugin definitions.
      $definitions = $plan_manager->getDefinitions();

      // Check if the supplied plan is valid.
      if (!empty($definitions[$plan])) {
        // Store the plan.
        $form['#plan'] = $plan;
      }
    }

    // Load the settings.
    $config = \Drupal::config('beacon_billing.settings');

    // Add an agreement checkbox.
    $form['consent'] = [
      '#type' => 'checkbox',
      '#title' => t('I accept the <a href=":tos" target="_blank">terms of service</a> and <a href=":privacy" target="_blank">privacy policy</a>.', [
        ':tos' => $config->get('tos_url'),
        ':privacy' => $config->get('privacy_url'),
      ]),
      '#required' => TRUE,
      '#weight' => 50,
    ];
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function beacon_billing_form_views_exposed_form_alter(&$form, FormStateInterface &$form_state) {
  // Extract the view.
  $view = $form_state->get('view');

  // Check if this is the admin subscriptions view.
  if ($view->id() == 'beacon_admin_subscriptions') {
    // Convert status in to a select list.
    $form['status']['#type'] = 'select';
    $form['status']['#options'] = [
      '' => t('- Any -'),
      StripeSubscription::STATUS_ACTIVE => t('Active'),
      StripeSubscription::STATUS_CANCELED => t('Canceled'),
      StripeSubscription::STATUS_PAST_DUE => t('Past due'),
      StripeSubscription::STATUS_TRIALING => t('Trialing'),
      StripeSubscription::STATUS_UNPAID => t('Unpaid'),
    ];
    $form['status']['#size'] = NULL;
  }
}

/**
 * Implements hook_block_view_BASE_BLOCK_ID_alter().
 */
function beacon_billing_block_view_sidebar_navigation_alter(array &$build, BlockPluginInterface $block) {
  $build['#pre_render'][] = 'beacon_billing_sidebar_navigation_alter';
}

/**
 * Pre-render the sidebar navigation block.
 *
 * @see beacon_billing_block_view_sidebar_navigation_alter()
 */
function beacon_billing_sidebar_navigation_alter(array $build) {
  // Check if the user is logged in.
  if (\Drupal::currentUser()->isAuthenticated()) {
    // Add a link to manage billing.
    $build['content']['items']['billing'] = [
      'title' => t('Billing'),
      'url' => Url::fromRoute('beacon_billing.manage_subscription'),
      'icon' => 'credit-card',
    ];

    // Check if the Drupal menu is present.
    if (isset($build['content']['items']['drupal'])) {
      // Move it to the end.
      $drupal = $build['content']['items']['drupal'];
      unset($build['content']['items']['drupal']);
      $build['content']['items']['drupal'] = $drupal;
    }
  }
  return $build;
}

/**
 * Submit handler for the user registration form.
 */
function beacon_billing_form_user_register_form_submit(&$form, FormStateInterface $form_state) {
  // Load the user.
  $user = $form_state->getFormObject()->getEntity();

  // Determine the plan ID.
  $plan = !empty($form['#plan']) ? $form['#plan'] : NULL;

  // Create a subscription.
  \Drupal::service('beacon_billing')->createSubscription($user, $plan);

  // Set a message about the trial.
  drupal_set_message(t('Your %day day free trial has begun. Please visit the <a href=":link">billing page</a> to choose your subscription plan and add a payment method before your trial ends.', [
    '%day' => \Drupal::config('beacon_billing.settings')->get('trial_period_days'),
    ':link' => Url::fromRoute('beacon_billing.manage_subscription')->toString(),
  ]), 'warning');
}
