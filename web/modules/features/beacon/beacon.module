<?php

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\user\Entity\User;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Cache\CacheBackendInterface;
use Drupal\Core\Database\Query\AlterableInterface;

/**
 * Implements hook_cron().
 */
function beacon_cron() {
  // Load event storage.
  $event_storage = \Drupal::entityTypeManager()
    ->getStorage('event');

  // Find up to 50 expired events.
  $event_ids = $event_storage
    ->getQuery()
    ->condition('expire', time(), '<')
    // Constant or setting?
    ->range(0, 50)
    ->execute();

  // Load and delete the events.
  $event_storage->delete($event_storage->loadMultiple($event_ids));
}

/**
 * Implements hook_entity_base_field_info().
 */
function beacon_entity_base_field_info(EntityTypeInterface $entity_type) {
  // Check if this is the user entity type.
  if ($entity_type->id() === 'user') {
    // Add a field to store the real name.
    $fields['real_name'] = BaseFieldDefinition::create('string')
      ->setLabel(t('Name'))
      ->setDescription(t('Provide your name.'))
      ->setRequired(TRUE)
      ->setSettings([
        'max_length' => 255,
        'text_processing' => 0,
      ])
      ->setDefaultValue('')
      ->setDisplayOptions('form', [
        'type' => 'string_textfield',
        'weight' => -20,
      ])
      ->setDisplayConfigurable('form', TRUE);

    return $fields;
  }
}

/**
 * Implements hook_entity_type_build().
 */
function beacon_entity_type_build(array &$entity_types) {
  // Override the user entity type to support UUIDs in urls.
  //$entity_types['user']->setClass('Drupal\beacon\Entity\User');
}

/**
 * Implements hook_entity_insert().
 */
function beacon_entity_insert(EntityInterface $entity) {
  _beacon_entity_post_save_cache_invalidate($entity);
}

/**
 * Implements hook_entity_update().
 */
function beacon_entity_update(EntityInterface $entity) {
  _beacon_entity_post_save_cache_invalidate($entity);
}

/**
 * Implements hook_entity_delete().
 */
function beacon_entity_delete(EntityInterface $entity) {
  _beacon_entity_post_save_cache_invalidate($entity);
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_channel_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'channel');
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_event_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'event');
}

/**
 * Implements hook_query_TAG_alter().
 */
function beacon_query_alert_access_alter(AlterableInterface $query) {
  // Add access control.
  _beacon_entity_query_access_alert($query, 'alert');
}

/**
 * Implements hook_mail().
 */
function beacon_mail($key, &$message, $params) {
  switch ($key) {
    // Alert.
    case 'alert':
      $message['subject'] = $params['subject'];
      $message['body'] = $params['body'];
      break;
  }
}

/**
 * Implements hook_views_data_alter().
 */
function beacon_views_data_alter(array &$data) {
  // There is a bug in core where entity edit links include a broken destination
  // if the view uses AJAX.
  // @see https://www.drupal.org/project/drupal/issues/2828733
  // To bypass this, we'll use a custom field that does not include the destination.
  return;
  // TODO
  $data['company']['edit_company']['field']['id'] = 'entity_link_edit_no_destination';
  $data['teams']['edit_team']['field']['id'] = 'entity_link_edit_no_destination';
  $data['positions']['edit_position']['field']['id'] = 'entity_link_edit_no_destination';
  $data['applicants']['edit_applicant']['field']['id'] = 'entity_link_edit_no_destination';
  $data['evaluations']['edit_evaluation']['field']['id'] = 'entity_link_edit_no_destination';
}

/**
 * Implements hook_theme().
 */
function beacon_theme($existing, $type, $theme, $path) {
  $items = [];

  // Add functions for each entity type.
  foreach (beacon_entity_types() as $type) {
    $items[$type] = [
      'render element' => 'elements',
      'file' => "{$type}.page.inc",
    ];
  }

  $items['chartjs'] = [
    'template'  => 'chartjs',
    'variables' => [
      'id' => NULL,
      'config' => NULL,
    ],
    'path' => $path . '/templates',
  ];

  return $items;
}

/**
 * Template preprocess hook for chartjs charts.
 */
function template_preprocess_chartjs(&$variables) {
  // Attach the chartjs library.
  $variables['#attached']['library'] = 'beacon/chartjs';

  // Add the ID and config to the JS settings.
  $variables['#attached']['drupalSettings']['chartJs'][$variables['id']] = $variables['config'];
}

/**
 * Get a list of beacon entity type IDs.
 *
 * @return array
 *   An array of beacon entity type IDs.
 */
function beacon_entity_types() {
  return [
    'channel',
    'event',
    'alert',
  ];
}

/**
 * Add access control to an entity query.
 *
 * If the user is not an admin of the entity, only entities that they own
 * will be returned, unless it's an entity reference query, in which case
 * admin permissions are ignored.
 *
 * @see hook_query_TAG_alter()
 * @param \Drupal\Core\Database\Query\AlterableInterface $query
 *   The query to alter for access control.
 * @param $entity_type_id
 *   The entity type to add access for. This can usually be extract from the query
 *   metadata but there is no guarantee.
 */
function _beacon_entity_query_access_alert(AlterableInterface $query, $entity_type_id) {
  $filter = FALSE;

  // Get the current user.
  $user = \Drupal::currentUser();

  // Check if this is an entity reference query.
  if ($query->hasTag('entity_reference')) {
    $filter = TRUE;
  }
  else {
    // Get the entity admin permission.
    $permission = \Drupal::entityTypeManager()
      ->getDefinition($entity_type_id)
      ->getAdminPermission();

    // Check if the user does not have the permission.
    if (!$user->hasPermission($permission)) {
      $filter = TRUE;
    }
  }

  // Check if we should filter.
  if ($filter) {
    // Get the query tables.
    $tables = $query->getTables();

    // Determine the alias.
    $alias = isset($tables[$entity_type_id]) ? $tables[$entity_type_id]['alias'] : $tables['base_table']['alias'];

    // Filter for entities that this user owns.
    $query->condition($alias . '.user_id', $user->id());
  }
}

/**
 * Helper function to clear custom cache tags whenever certain entities are
 * saved or deleted.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity being acted on.
 */
function _beacon_entity_post_save_cache_invalidate(EntityInterface $entity) {
  switch ($entity->getEntityTypeId()) {
    case 'channel':
      Cache::invalidateTags(['user.channels:' . $entity->getOwnerId()]);
      break;

    case 'event':
      // For some reason, the entity's tags are required here too.
      // TODO: Why is this ^ ?
      // TODO: New events do NOT CLEAR the channel events view.
      Cache::invalidateTags($entity->getCacheTags() + ['channel.events:' . $entity->channel->entity->id()]);
      break;
  }
}

/**
 * Get a list of the event types for the events within a given channel.
 *
 * @param int $channel_id
 *   The channel entity ID.
 * @return array
 *   An array of event type strings.
 */
function beacon_get_channel_event_types(int $channel_id) {
  // Generate a cache ID.
  $cache_id = "channel_event_types:{$channel_id}";

  // Load the cache.
  $cache = \Drupal::cache();

  // Check the cache for data.
  if ($data = $cache->get($cache_id)) {
    return $data->data;
  }

  // Find all of the event types within this channel.
  $query = \Drupal::database()->select('event');
  $query->fields('event', ['type']);
  $query->condition('channel', $channel_id);
  $query->groupBy('type');
  $query->orderBy('type');
  $types = $query->execute()->fetchCol();

  // Cache the types.
  $cache->set($cache_id, $types, CacheBackendInterface::CACHE_PERMANENT, ["channel:{$channel_id}", "channel.events:{$channel_id}"]);

  return $types;
}
