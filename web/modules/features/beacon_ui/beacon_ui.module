<?php

use Drupal\views\Views;
use Drupal\beacon\Entity\Channel;
use Drupal\user\Entity\User;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Psr\Log\LogLevel;

/**
 * Implements hook_user_format_name_alter().
 */
function beacon_ui_user_format_name_alter(&$name, $account) {
  // Check if the user is logged in.
  if ($account->isAuthenticated()) {
    // Load the user.
    if ($user = User::load($account->id())) {
      // Check if the user has a real name.
      if ($real_name = $user->get('real_name')->value) {
        // Use the real name.
        $name = $real_name;
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function beacon_ui_mail($key, &$message, $params) {
  switch ($key) {
    // Support request.
    case 'support':
      $message['subject'] = '[Support request] ' . $params['subject'];
      $message['body'][] = 'A support request has been submitted:';
      $message['body'][] = '';
      $message['body'][] = 'Name: ' . $params['name'];
      $message['body'][] = 'Email: ' . $params['email'];
      $message['body'][] = 'Subject: ' . $params['subject'];
      $message['body'][] = 'Message:';
      $message['body'][] = $params['message'];
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_ui_form_alert_form_alter(&$form, FormStateInterface $form_state) {
  $form['actions']['submit']['#submit'][] = 'beacon_ui_form_alert_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_ui_form_user_register_form_alter(&$form, FormStateInterface $form_state) {
  // Proceed if the user is actually registering, rather than an admin creating
  // a new user.
  if (\Drupal::currentUser()->isAnonymous()) {
    // Block access to the username since we will make it the email address.
    $form['account']['name']['#access'] = FALSE;

    // Add our validation and submit handlers.
    $form['#validate'] = array_merge(['beacon_ui_form_user_register_form_validate'], $form['#validate']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_ui_form_user_login_form_alter(&$form, FormStateInterface $form_state) {
  // Change the username to say email; since the values are the same.
  $form['name']['#title'] = t('Email address');

  // Remove descriptions.
  $form['name']['#description'] = NULL;
  $form['pass']['#description'] = NULL;

  // Add an additional submit handler.
  $form['#submit'][] = 'beacon_ui_user_login_form_submit';
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function beacon_ui_form_user_form_alter(&$form, FormStateInterface $form_state) {
  // Change the email description.
  $form['account']['mail']['#description'] = t('A valid email address is required. This address will be used to login and reset your password, if needed.');
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function beacon_ui_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {
  // Extract the view.
  $view = $form_state->get('view');

  // Check if an alter function exists for this views exposed form.
  $function = 'beacon_ui_views_exposed_form_' . $view->id() . '_form_alter';
  if (function_exists($function)) {
    // Alter the form.
    $function($form, $form_state);
  }
}

/**
 * Implements hook_entity_presave().
 */
function beacon_ui_entity_presave(EntityInterface $entity) {
  // Check for a user entity.
  if ($entity->getEntityTypeId() == 'user') {
    // Check if this user is not an admin.
    if (!$entity->hasPermission('administer users')) {
      // Load the current user.
      $user = User::load(\Drupal::currentUser()->id());

      // Continue if the acting user is not an admin.
      if (!$user->hasPermission('administer users')) {
        // Keep the user name and email the same.
        $entity->set('name', $entity->mail->value);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function beacon_ui_preprocess_block(&$variables) {
  // Check for the main content block.
  if ($variables['plugin_id'] == 'system_main_block') {
    // Get the route name.
    $route_name = \Drupal::routeMatch()->getRouteName();

    // Check for a canonical match on channel entities.
    if ($route_name == "entity.channel.canonical") {
      // Do not render this block as a tile since our theme will
      // render everything as individual cards.
      $variables['no_tile'] = TRUE;
    }
  }
}

/**
 * Submit handler for alert entity forms.
 */
function beacon_ui_form_alert_form_submit(&$form, FormStateInterface $form_state) {
  // Redirect to the channel's alert view.
  $channel_uuid = $form_state->getFormObject()->getEntity()->channel->entity->uuid();
  $form_state->setRedirect('view.beacon_channel_alerts.page_1', ['channel' => $channel_uuid]);
}

/**
 * Validation handler for the user registration form.
 */
function beacon_ui_form_user_register_form_validate(&$form, FormStateInterface $form_state) {
  // Copy the email in to the name.
  $form_state->setValue('name', $form_state->getValue('mail'));
}

/**
 * Submit handler for the user login form.
 */
function beacon_ui_user_login_form_submit(&$form, FormStateInterface $form_state) {
  // Redirect home.
  $form_state->setRedirect('<front>');
}

/**
 * Views exposed form alter callback for view: beacon_channel_events
 *
 * @see beacon_ui_form_views_exposed_form_alter()
 */
function beacon_ui_views_exposed_form_beacon_channel_events_form_alter(&$form, FormStateInterface $form_state) {
  // Convert severity in to a select list.
  // Core does not automatically do this for base fields.
  $form['severity']['#type'] = 'select';
  $form['severity']['#options'] = [
    '' => t('- Any -'),
    LogLevel::DEBUG => t('Debug'),
    LogLevel::INFO => t('Info'),
    LogLevel::NOTICE => t('Notice'),
    LogLevel::WARNING => t('Warning'),
    LogLevel::ERROR => t('Error'),
    LogLevel::CRITICAL => t('Critical'),
    LogLevel::ALERT => t('Alert'),
    LogLevel::EMERGENCY => t('Emergency'),
  ];
  $form['severity']['#size'] = NULL;

  // Extract the channel.
  if ($channel_id = $form_state->get('view')->argument['channel']->getValue()) {
    // Load the event types for this channel.
    $types = beacon_get_channel_event_types(Channel::load($channel_id));

    // Convert type in to a select list only if there are less than 200 types.
    if (count($types) < 200) {
      $form['type']['#type'] = 'select';
      $form['type']['#options'] = [
        '' => t('- Any -'),
      ] + $types;
      $form['type']['#size'] = NULL;
    }
  }
}

/**
 * Views exposed form alter callback for view: beacon_events
 *
 * @see beacon_ui_form_views_exposed_form_alter()
 */
function beacon_ui_views_exposed_form_beacon_events_form_alter(&$form, FormStateInterface $form_state) {
  // Convert severity in to a select list.
  // Core does not automatically do this for base fields.
  $form['severity']['#type'] = 'select';
  $form['severity']['#options'] = [
    '' => t('- Any -'),
    LogLevel::DEBUG => t('Debug'),
    LogLevel::INFO => t('Info'),
    LogLevel::NOTICE => t('Notice'),
    LogLevel::WARNING => t('Warning'),
    LogLevel::ERROR => t('Error'),
    LogLevel::CRITICAL => t('Critical'),
    LogLevel::ALERT => t('Alert'),
    LogLevel::EMERGENCY => t('Emergency'),
  ];
  $form['severity']['#size'] = NULL;

  // Load the event types for this user.
  $types = beacon_get_user_event_types(NULL, TRUE);

  // Convert type in to a select list only if there are less than 200 types.
  if (count($types) < 200) {
    $form['type']['#type'] = 'select';
    $form['type']['#options'] = [
      '' => t('- Any -'),
    ] + $types;
    $form['type']['#size'] = NULL;
  }

  // Convert channel to a select list.
  $form['channel']['#type'] = 'select';
  $form['channel']['#options'] = [
    '' => t('- Any -'),
  ] + beacon_get_user_channels();
  $form['channel']['#size'] = NULL;
}
